var ExperienceWidgetController,
  __bind = function(fn, me) {
    return function() {
      return fn.apply(me, arguments);
    };
  };

ExperienceWidgetController = (function() {
  function ExperienceWidgetController(widget) {
    var percents;
    this.widget = widget;
    this.fromDrag = __bind(this.fromDrag, this);
    this.onStop = __bind(this.onStop, this);
    this.fromClick = __bind(this.fromClick, this);
    this.fromInput = __bind(this.fromInput, this);
    this.status = this.widget.find('.experience-status');
    this.line = this.widget.find('.experience-line');
    this.handle = this.widget.find('.experience-handle');
    this.input = this.widget.find('input.value');
    this.max = parseInt(this.widget.attr('data-max'), 10);
    this.min = parseInt(this.widget.attr('data-min'), 10);
    this.initial = parseInt(this.widget.attr('data-initial'), 10);
    this.line.on('click', this.fromClick);
    this.input.on('change', this.fromInput);
    this.handle.draggable({
      containment: "parent",
      axis: "x",
      drag: this.fromDrag,
      stop: this.onStop,
      handle: "span"
    });
    this.input.val(Math.min(this.max, Math.max(this.min, this.initial)));
    percents = this.initial * 100 / Math.abs(this.max - this.min);
    this.status.css({
      width: percents + '%'
    });
    this.handle.css({
      left: percents + '%'
    });
  }

  ExperienceWidgetController.prototype.fromInput = function(event) {
    var percents, val;
    val = this.input.val().trim();
    if (val === "") {
      this.input.val(this.initial);
      val = this.initial;
    }
    val = Math.min(this.max, Math.max(this.min, parseInt(val, 10)));
    this.input.val(val);
    percents = Math.min(100, parseInt(val, 10) * 100 / this.max);
    this.status.css({
      width: percents + '%'
    });
    return this.handle.css({
      left: percents + '%'
    });
  };

  ExperienceWidgetController.prototype.fromClick = function(event) {
    var left, percents;
    this.lineWidth = this.line.width();
    left = event.clientX - this.line.offset().left;
    percents = Math.max(left * 100 / this.lineWidth, this.min * 100 / this.max);
    this.status.css({
      width: percents + '%'
    });
    this.handle.css({
      left: percents + '%'
    });
    return this.input.val(Math.min(this.max, Math.max(this.min, Math.round((percents / 100) * this.max), +this.min)));
  };

  ExperienceWidgetController.prototype.onStop = function(event, ui) {
    var percents;
    percents = Math.max(ui.position.left * 100 / this.lineWidth, this.min * 100 / this.max);
    console.log(ui.position.left, percents);
    return this.handle.css({
      left: percents + '%'
    });
  };

  ExperienceWidgetController.prototype.fromDrag = function(event, ui) {
    var percents;
    this.lineWidth = this.line.width();
    percents = Math.max(ui.position.left * 100 / this.lineWidth, this.min * 100 / this.max);
    this.status.css({
      width: percents + '%'
    });
    return this.input.val(Math.min(this.max, Math.max(this.min, Math.round((percents / 100) * this.max), +this.min)));
  };

  return ExperienceWidgetController;

})();

$(document).ready(function() {
  var element, _i, _len, _ref, _results;
  _ref = $('.experience-widget');
  _results = [];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    element = _ref[_i];
    _results.push(new ExperienceWidgetController($(element)));
  }
  return _results;
});

//# sourceMappingURL=data:application/json;base64,