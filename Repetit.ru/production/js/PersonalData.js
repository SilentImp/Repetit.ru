var PersonalData,
  __bind = function(fn, me) {
    return function() {
      return fn.apply(me, arguments);
    };
  };

PersonalData = (function() {
  function PersonalData() {
    this.afterCheck = __bind(this.afterCheck, this);
    this.avatarSelected = __bind(this.avatarSelected, this);
    this.removeAvatar = __bind(this.removeAvatar, this);
    this.drop = __bind(this.drop, this);
    this.checkDate = __bind(this.checkDate, this);
    var duration, exp, format, input, inputs, locations, price, price_input, select, sertificat, sertificats, time, univercitys, _i, _len;
    this.form = $('.panel');
    if (this.form.length !== 1) {
      throw new Error('не найдена форма');
    }
    this.file = this.form.find('#registration-avatar');
    this.avatarTemplate = document.getElementById('current-avatar-template');
    this.fileSelector = $('.file-selector');
    FileAPI.event.on(document.getElementById('registration-avatar'), 'change', this.avatarSelected);
    $(document).dnd(this.over, this.drop);
    FileAPI.event.on(document, 'drop', this.droped);
    sertificats = $('.sertificats');
    if (sertificats.length > 0) {
      sertificats.fileapi({
        url: 'http://test.silentimp.info/test.php',
        duplicate: false,
        accept: 'image/*',
        maxSize: 5 * FileAPI.MB,
        autoUpload: false,
        multiple: true,
        onSelect: (function(_this) {
          return function(evt, ui) {
            var reader;
            _this.cerificates_count++;
            reader = new FileReader();
            reader.onload = function(event) {
              return _this.cert_list.append(_this.source({
                "id": _this.cerificates_count,
                "src": event.target.result
              }));
            };
            return reader.readAsDataURL(ui.files[0]);
          };
        })(this),
        elements: {
          ctrl: {
            upload: '.add-sertificat label'
          },
          list: '.sertificat-list'
        }
      });
    }
    sertificat = $("#sertificat-template");
    if (sertificat.length > 0) {
      this.source = $("#sertificat-template").html();
      this.source = Handlebars.compile(this.source);
      this.cert_list = $('.sertificat-list');
      this.cerificates_count = 0;
    }
    format = $('.lessons-format');
    if (format.length > 0) {
      inputs = format.find('input');
      for (_i = 0, _len = inputs.length; _i < _len; _i++) {
        input = inputs[_i];
        price_input = document.getElementById(input.getAttribute('data-price-field'));
        price = $(price_input).closest('.subdevision');
        if (input.checked) {
          price.removeClass('hide');
          price_input.removeAttribute('disabled');
          price_input.setAttribute('required', 'required');
        } else {
          price.addClass('hide');
          price_input.classList.remove('ui-state-error');
          price_input.setAttribute('disabled', 'disabled');
          price_input.removeAttribute('required');
        }
      }
      inputs.on('change', (function(_this) {
        return function(event) {
          input = $(event.currentTarget);
          price_input = document.getElementById(input.attr('data-price-field'));
          price = $(price_input).closest('.subdevision');
          if (event.currentTarget.checked) {
            price.removeClass('hide');
            price_input.removeAttribute('disabled');
            return price_input.setAttribute('required', 'required');
          } else {
            price.addClass('hide');
            price_input.classList.remove('ui-state-error');
            price_input.setAttribute('disabled', 'disabled');
            return price_input.removeAttribute('required');
          }
        };
      })(this));
    }
    this.address = $('.address-holder');
    this.address_count = 0;
    if (this.address.length > 0) {
      this.address_count++;
      this.address_source = $("#address-template").html();
      this.address_source = Handlebars.compile(this.address_source);
      this.address.prepend(this.address_source({
        "id": this.address_count
      }));
      this.add_education = $('.add-address');
      this.add_education.on('click', (function(_this) {
        return function(event) {
          event.preventDefault();
          _this.address_count++;
          _this.add_education.before(_this.address_source({
            "id": _this.address_count
          }));
          return _this.address.find('.adress-wrapper:last select').chosen({
            disable_search_threshold: 30
          });
        };
      })(this));
    }
    this.education = $('.education');
    this.education_count = 0;
    if (this.education.length > 0) {
      this.education_count++;
      this.education_source = $("#education-template").html();
      this.education_source = Handlebars.compile(this.education_source);
      this.education.prepend(this.education_source({
        "id": this.education_count
      }));
      this.add_education = $('.add-education');
      this.add_education.on('click', (function(_this) {
        return function(event) {
          event.preventDefault();
          _this.education_count++;
          return _this.add_education.before(_this.education_source({
            "id": _this.education_count
          }));
        };
      })(this));
    }
    select = $('select');
    if (select.length > 0) {
      select.chosen({
        disable_search_threshold: 30
      });
    }
    time = $('#duration');
    if (time.length > 0) {
      time.noUiSlider({
        step: 5,
        connect: "lower",
        start: 0,
        range: {
          'min': [30],
          'max': [180]
        },
        format: wNumb({
          decimals: 0
        })
      });
      duration = $('#duration-value');
      time.Link('lower').to(duration);
      time.on('change', (function(_this) {
        return function(event, ui) {
          console.log(event.currentTarget, ui);
          return $('strong.min-time').text(ui);
        };
      })(this));
    }
    exp = $('#experience');
    if (exp.length > 0) {
      exp.noUiSlider({
        step: 1,
        connect: "lower",
        start: 0,
        range: {
          'min': [0],
          'max': [50]
        },
        format: wNumb({
          decimals: 0
        })
      });
      exp.Link('lower').to($('#experience-value'));
    }
    this.form.h5Validate();
    this.form.on('submit', this.afterCheck);
    this.mounth_widget = this.form.find('.month.dropdown-widget');
    this.month = this.mounth_widget.find('select');
    this.year_widget = this.form.find('.year.dropdown-widget');
    this.year = this.year_widget.find('select');
    this.day = this.form.find('input.day');
    this.day.on('change', this.checkDate);
    this.month.on('change', this.checkDate);
    this.year.on('change', this.checkDate);
    locations = new Bloodhound({
      datumTokenizer: Bloodhound.tokenizers.obj.whitespace("city"),
      queryTokenizer: Bloodhound.tokenizers.whitespace,
      prefetch: "https://dl.dropboxusercontent.com/u/20810772/citys.json"
    });
    locations.initialize();
    $('#city').typeahead({
      hint: true,
      highlight: true,
      minLength: 1
    }, {
        name: 'locations',
        displayKey: 'city',
        source: locations.ttAdapter(),
        templates: {
          suggestion: Handlebars.compile('<p><b>{{region}}</b>{{city}}</p>')
        }
      });
    univercitys = new Bloodhound({
      datumTokenizer: function(data) {
        return Bloodhound.tokenizers.whitespace(data.title);
      },
      queryTokenizer: Bloodhound.tokenizers.whitespace,
      local: [
        {
          "title": "Andorra"
        }, {
        "title": "UnitedArabEmirates"
        }, {
        "title": "Afghanistan"
        }, {
        "title": "AntiguaandBarbuda"
        }, {
        "title": "Anguilla"
        }, {
        "title": "Albania"
        }, {
        "title": "Armenia"
        }, {
        "title": "Angola"
        }, {
        "title": "Antarctica"
        }
      ]
    });
    univercitys.initialize();
    $('#univercity').typeahead({
      hint: true,
      highlight: true,
      minLength: 1
    }, {
        name: 'univercitys',
        displayKey: 'title',
        source: univercitys.ttAdapter(),
        templates: {
          suggestion: Handlebars.compile('<p>{{title}}</p>')
        }
      });
  }

  PersonalData.prototype.checkDate = function(event) {
    var day, days;
    day = parseInt(this.day.val().trim(), 10);
    if (day < 1 || isNaN(day)) {
      this.day.val(1);
      return;
    }
    if (!this.mounth_widget.hasClass('unchanged') && !this.year_widget.hasClass('unchanged')) {
      days = parseInt(moment(this.year.val() + "-" + (parseInt(this.month.val(), 10) + 1), "YYYY-MM").daysInMonth(), 10);
      if (day > days) {
        this.day.val(days);
      }
      return;
    }
    if (day > 31) {
      return this.day.val(31);
    }
  };

  PersonalData.prototype.droped = function(event) {
    event.preventDefault();
    return FileAPI.getDropFiles(event, function(files) {});
  };

  PersonalData.prototype.over = function(over) {};

  PersonalData.prototype.drop = function(files) {
    var reader;
    if (files.length) {
      reader = new FileReader();
      reader.onload = (function(_this) {
        return function(event) {
          var avatar, prev;
          _this.avatarTemplate.content.querySelector('img').src = event.target.result;
          avatar = document.importNode(_this.avatarTemplate.content, true);
          prev = _this.fileSelector.prev();
          if (prev.hasClass('current-avatar')) {
            prev.remove();
          }
          _this.fileSelector.before(avatar);
          return _this.fileSelector.prev().find('.close').on('click', _this.removeAvatar);
        };
      })(this);
      return reader.readAsDataURL(files[0]);
    }
  };

  PersonalData.prototype.removeAvatar = function(event) {
    event.preventDefault();
    this.fileSelector.prev().remove();
    this.file.replaceWith(this.file.val('').clone(true));
    return this.file = this.form.find('#registration-avatar');
  };

  PersonalData.prototype.avatarSelected = function(event) {
    var ext, files, reader;
    files = FileAPI.getFiles(event);
    ext = files[0]['name'].substring(files[0]['name'].lastIndexOf('.') + 1).toLowerCase();
    if (files[0] && (files[0].size <= FileAPI.MB) && (ext === "gif" || ext === "png" || ext === "jpeg" || ext === "jpg")) {
      reader = new FileReader();
      reader.onload = (function(_this) {
        return function(event) {
          var avatar, prev;
          _this.avatarTemplate.content.querySelector('img').src = event.target.result;
          avatar = document.importNode(_this.avatarTemplate.content, true);
          prev = _this.fileSelector.prev();
          if (prev.hasClass('current-avatar')) {
            prev.remove();
          }
          _this.fileSelector.before(avatar);
          return _this.fileSelector.prev().find('.close').on('click', _this.removeAvatar);
        };
      })(this);
      return reader.readAsDataURL(files[0]);
    } else {
      this.fileSelector.prev().remove();
      this.file.replaceWith(this.file.val('').clone(true));
      return this.file = this.form.find('#registration-avatar');
    }
  };

  PersonalData.prototype.afterCheck = function(event) {
    var drop_down_err, input, _i, _len, _ref;
    if (this.form.find('input.ui-state-error, select.ui-state-error, textarea.ui-state-error').length > 0) {
      return false;
    }
    drop_down_err = false;
    _ref = this.form.find('.dropdown-widget');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      input = _ref[_i];
      if (!input.controller.validate()) {
        drop_down_err = true;
      }
    }
    if (drop_down_err) {
      event.preventDefault();
      return false;
    }
  };

  return PersonalData;

})();

$(document).ready(function() {
  return new PersonalData();
});

//# sourceMappingURL=data:application/json;base64,